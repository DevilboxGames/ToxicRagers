using System;
using System.Collections.Generic;
using System.IO;

using ToxicRagers.Carmageddon.Helpers;
using ToxicRagers.Helpers;

namespace ToxicRagers.Carmageddon.Formats
{
    public class Noncar
    {
        public string Name { get; set; }

        public int Number { get; set; }

        public Vector3 CentreOfMass { get; set; } = Vector3.Zero;

        public Vector3 CentreOfMassWhenAttached { get; set; } = Vector3.Zero;

        public BoundingBox Bounds { get; set; } = new BoundingBox();

        public List<Vector3> ExtraPoints { get; set; } = new List<Vector3>();

        public Vector2 Mass { get; set; } = Vector2.Zero;

        public Vector3 AngularMomentum { get; set; } = Vector3.Zero;

        public float BendAngle { get; set; }

        public float TorqueToMove { get; set; }

        public List<string> Shrapnel { get; set; } = new List<string>();

        public static Noncar Load(string path)
        {
            DocumentParser file = new DocumentParser(path);
            Noncar noncar = new Noncar { Name = Path.GetFileNameWithoutExtension(path) };

            noncar.Number = file.ReadInt();
            noncar.CentreOfMass = file.ReadVector3();
            noncar.CentreOfMassWhenAttached = file.ReadVector3();
            noncar.Bounds.Min = file.ReadVector3();
            noncar.Bounds.Max = file.ReadVector3();

            int numExtraPoints = file.ReadInt();

            for (int i = 0; i < numExtraPoints; i++)
            {
                noncar.ExtraPoints.Add(file.ReadVector3());
            }

            noncar.Mass = file.ReadVector2();
            noncar.AngularMomentum = file.ReadVector3();
            noncar.BendAngle = file.ReadSingle();
            noncar.TorqueToMove = file.ReadSingle();

            int numMaterials = file.ReadInt();

            for (int i = 0; i < numMaterials; i++)
            {
                noncar.Shrapnel.Add(file.ReadLine());
            }

            return noncar;
        }

        public void Save(string path)
        {
            using (DocumentWriter dw = new DocumentWriter(path))
            {
                dw.WriteLine($"// Non-car Data File");
                dw.WriteLine($"// Generated by Flummery");
                dw.WriteLine($"// Created: {DateTime.Now.ToString("")}");
                dw.WriteLine($"// Object: {Name}");

                dw.WriteLine($"{Number}", "Number of non-car");
                dw.WriteLine($"{CentreOfMass.X},{CentreOfMass.Y},{CentreOfMass.Z}", "Centre of mass position");
                dw.WriteLine($"{CentreOfMassWhenAttached.X},{CentreOfMassWhenAttached.Y},{CentreOfMassWhenAttached.Z}", "Centre of mass position when attached");
                dw.WriteLine($"{Bounds.Min.X},{Bounds.Min.Y},{Bounds.Min.Z}", "min x, min y, min z");
                dw.WriteLine($"{Bounds.Max.X},{Bounds.Max.Y},{Bounds.Max.Z}", "max x, max y, max z");

                dw.WriteLine($"{ExtraPoints.Count}", "Number of extra points");
                foreach (Vector3 extraPoint in ExtraPoints) { dw.WriteLine($"{extraPoint.X},{extraPoint.Y},{extraPoint.Z}"); }

                dw.WriteLine($"{Mass.X},{Mass.Y}", "Mass in tonnes (detached, attached)");
                dw.WriteLine($"{AngularMomentum.X},{AngularMomentum.Y},{AngularMomentum.Z}", "am length, width, height");
                dw.WriteLine($"{BendAngle}", "Bend angle before snapping");
                dw.WriteLine($"{TorqueToMove}", "Torque (KN/m) needed to move object");

                dw.WriteLine($"// Materials for shrapnel.");
                dw.WriteLine($"{Shrapnel.Count}", "Number of materials");
                foreach (string shrapnel in Shrapnel) { dw.WriteLine($"{shrapnel}"); }

                dw.WriteLine($"// End of file.");
            }
        }
    }
}